@import "reset.css";

.parent {
  background-color: hsla(200, 100%, 20%);
  width: 400px;
  height: 400px;
}

/* transition을 적용할 때, hover할 때 적용하고 싶으니
hover에 하는 경우가 많은데, 실제로는 가상선택자 말고
대상에 직접 해야 한다 */
.child {
  background-color: red;
  width: 50%;
  height: 50%;
  /* 기본은 all, 모든 property를 animate하고 싶다
  transform만 하고 싶으면 그것만 써주면 된다.
  specifying을 안 하면 child의 모든 속성에 대해 animation이 되므로
  bg-color도 서서히 1초에 걸쳐 바뀐다
  그러나 transform 속성을 specify하면 색깔은 '서서히'에 해당되지 않기에
  hovering 하자마자 바로 green색으로 바뀐다 */

  /* 대상, 경과시간, timing, 딜레이 */
  transition: transform 1s cubic-bezier(0.42, 0, 0.18, 1.15) 3s;
  /* transition: 1s; */

  /* delay
  linear: 시작과 끝에 even spacing, 균일 간격 
  ease-in-out: 시작,끝 천천히, 중간 가속
  ease-in: 시작 천천히
  커스터마이징하고싶으면 요소 inspect하면 됨
  */
  animation: left-to-right 1s ease-in forwards infinite alternate;
}

/*
transform은 여기에 주는게 맞다
hover, active같은 가상 선택자에 transition을 주면
그 가상효과가 끝나자마자 바로 transition 효과가 사라지기 때문에
여기에 주면 안된다  */
.parent:hover .child {
  background-color: green;
  transform: translateX(100%);
  /* transition: transform 1s; */

  /* custom이름, duration, timing, 애니메이션 끝났을 때 대상 요소 위치, 회수(infinite) 가능, 애니메이션 방향, delay  */
  animation-play-state: paused;
}

/* transition 만으로는 대상, 경과시간, 애니메이션, 딜레이밖에 못한다
더 특별한 특수효과를 쓰려면 animation과 keyframes이 필요하다
keyframes의 이름은 custom 이름 */
@keyframes left-to-right {
  0% {
    transform: translateX(0);
  }
  33% {
    transform: translateY(100%);
  }
  50% {
    background-color: blue;
  }
  66% {
    transform: translateX(100%) translateY(100%);
  }
  100% {
    background-color: green;
    transform: translateX(100%);
  }
}
